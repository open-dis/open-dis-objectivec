#import "EntityID.h"
#import "EntityID.h"
#import "EventIdentifier.h"
#import "Vector3Float.h"
#import "Vector3Float.h"
#import "Vector3Float.h"
#import <Foundation/Foundation.h>
#import "EntityInformationFamilyPdu.h"
#import "DataInput.h"
#import "DataOutput.h"


// Information about elastic collisions in a DIS exercise shall be communicated using a Collision-Elastic PDU. Section 7.2.4. COMPLETE

// Copyright (c) 2007-2009, MOVES Institute, Naval Postgraduate School. All rights reserved. 
//
// @author DMcG

@interface CollisionElasticPdu : EntityInformationFamilyPdu
{
  /** This field shall identify the entity that is issuing the PDU and shall be represented by an Entity Identifier record (see 6.2.28) */
  EntityID *issuingEntityID; 

  /** This field shall identify the entity that has collided with the issuing entity. This field shall be a valid identifier of an entity or server capable of responding to the receipt of this Collision-Elastic PDU. This field shall be represented by an Entity Identifier record (see 6.2.28). */
  EntityID *collidingEntityID; 

  /** This field shall contain an identification generated by the issuing simulation application to associate related collision events. This field shall be represented by an Event Identifier record (see 6.2.34). */
  EventIdentifier *collisionEventID; 

  /** some padding */
  short pad; 

  /** This field shall contain the velocity at the time the collision is detected at the point the collision is detected. The velocity shall be represented in world coordinates. This field shall be represented by the Linear Velocity Vector record [see 6.2.95 item c)] */
  Vector3Float *contactVelocity; 

  /** This field shall contain the mass of the issuing entity and shall be represented by a 32-bit floating point number representing kilograms */
  float mass; 

  /** This field shall specify the location of the collision with respect to the entity with which the issuing entity collided. This field shall be represented by an Entity Coordinate Vector record [see 6.2.95 item a)]. */
  Vector3Float *locationOfImpact; 

  /** These six records represent the six independent components of a positive semi-definite matrix formed by pre-multiplying and post-multiplying the tensor of inertia, by the anti-symmetric matrix generated by the moment arm, and shall be represented by 32-bit floating point numbers (see 5.3.4.4) */
  float collisionIntermediateResultXX; 

  /** tensor values */
  float collisionIntermediateResultXY; 

  /** tensor values */
  float collisionIntermediateResultXZ; 

  /** tensor values */
  float collisionIntermediateResultYY; 

  /** tensor values */
  float collisionIntermediateResultYZ; 

  /** tensor values */
  float collisionIntermediateResultZZ; 

  /** This record shall represent the normal vector to the surface at the point of collision detection. The surface normal shall be represented in world coordinates. This field shall be represented by an Entity Coordinate Vector record [see 6.2.95 item a)]. */
  Vector3Float *unitSurfaceNormal; 

  /** This field shall represent the degree to which energy is conserved in a collision and shall be represented by a 32-bit floating point number. In addition, it represents a free parameter by which simulation application developers may “tune” their collision interactions. */
  float coefficientOfRestitution; 

}

@property(readwrite, retain) EntityID* issuingEntityID; 
@property(readwrite, retain) EntityID* collidingEntityID; 
@property(readwrite, retain) EventIdentifier* collisionEventID; 
@property(readwrite, assign) short pad; 
@property(readwrite, retain) Vector3Float* contactVelocity; 
@property(readwrite, assign) float mass; 
@property(readwrite, retain) Vector3Float* locationOfImpact; 
@property(readwrite, assign) float collisionIntermediateResultXX; 
@property(readwrite, assign) float collisionIntermediateResultXY; 
@property(readwrite, assign) float collisionIntermediateResultXZ; 
@property(readwrite, assign) float collisionIntermediateResultYY; 
@property(readwrite, assign) float collisionIntermediateResultYZ; 
@property(readwrite, assign) float collisionIntermediateResultZZ; 
@property(readwrite, retain) Vector3Float* unitSurfaceNormal; 
@property(readwrite, assign) float coefficientOfRestitution; 

-(id)init; // Initializer
-(void)dealloc;
-(void)marshalUsingStream:(DataOutput*) dataStream;
-(void)unmarshalUsingStream:(DataInput*) dataStream;

-(int)getMarshalledSize;

@end

// Copyright (c) 1995-2009 held by the author(s).  All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
//  are met:
// 
//  * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the names of the Naval Postgraduate School (NPS)
//  Modeling Virtual Environments and Simulation (MOVES) Institute
// (http://www.nps.edu and http://www.MovesInstitute.org)
// nor the names of its contributors may be used to endorse or
//  promote products derived from this software without specific
// prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
